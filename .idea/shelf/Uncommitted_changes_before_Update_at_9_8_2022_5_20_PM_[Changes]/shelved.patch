Index: AdvancedQuerying/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/pom.xml b/AdvancedQuerying/pom.xml
new file mode 100644
--- /dev/null	(date 1624868500000)
+++ b/AdvancedQuerying/pom.xml	(date 1624868500000)
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+    <parent>
+        <groupId>org.springframework.boot</groupId>
+        <artifactId>spring-boot-starter-parent</artifactId>
+        <version>2.5.2</version>
+        <relativePath/> <!-- lookup parent from repository -->
+    </parent>
+    <groupId>com.example</groupId>
+    <artifactId>advquerying</artifactId>
+    <version>0.0.1-SNAPSHOT</version>
+    <name>advquerying</name>
+    <description>Demo project for Spring Boot</description>
+    <properties>
+        <java.version>16</java.version>
+    </properties>
+    <dependencies>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-data-jpa</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>mysql</groupId>
+            <artifactId>mysql-connector-java</artifactId>
+            <scope>runtime</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.springframework.boot</groupId>
+            <artifactId>spring-boot-starter-test</artifactId>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.springframework.boot</groupId>
+                <artifactId>spring-boot-maven-plugin</artifactId>
+            </plugin>
+        </plugins>
+    </build>
+
+</project>
Index: AdvancedQuerying/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/AdvancedQuerying/src/main/resources/application.properties b/AdvancedQuerying/src/main/resources/application.properties
new file mode 100644
--- /dev/null	(date 1662379891562)
+++ b/AdvancedQuerying/src/main/resources/application.properties	(date 1662379891562)
@@ -0,0 +1,23 @@
+#Data Source Properties
+spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
+spring.datasource.url=jdbc:mysql://localhost:3306/shampoo_company?useSSL=false&createDatabaseIfNotExist=true
+spring.datasource.username=root
+spring.datasource.password=
+
+#JPA Properties
+spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
+spring.jpa.properties.hibernate.format_sql = TRUE
+spring.jpa.hibernate.ddl-auto = update
+spring.jpa.open-in-view=false
+
+###Logging Levels
+# Disable the default loggers
+logging.level.org = WARN
+logging.level.blog = WARN
+
+#Show SQL executed with parameter bindings
+logging.level.org.hibernate.SQL = DEBUG
+logging.level.org.hibernate.type.descriptor = TRACE
+
+#Change server port
+#server.port=8000
\ No newline at end of file
Index: AdvancedQuerying/target/classes/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/AdvancedQuerying/target/classes/application.properties b/AdvancedQuerying/target/classes/application.properties
new file mode 100644
--- /dev/null	(date 1662380191902)
+++ b/AdvancedQuerying/target/classes/application.properties	(date 1662380191902)
@@ -0,0 +1,23 @@
+#Data Source Properties
+spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
+spring.datasource.url=jdbc:mysql://localhost:3306/shampoo_company?useSSL=false&createDatabaseIfNotExist=true
+spring.datasource.username=root
+spring.datasource.password=
+
+#JPA Properties
+spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
+spring.jpa.properties.hibernate.format_sql = TRUE
+spring.jpa.hibernate.ddl-auto = update
+spring.jpa.open-in-view=false
+
+###Logging Levels
+# Disable the default loggers
+logging.level.org = WARN
+logging.level.blog = WARN
+
+#Show SQL executed with parameter bindings
+logging.level.org.hibernate.SQL = DEBUG
+logging.level.org.hibernate.type.descriptor = TRACE
+
+#Change server port
+#server.port=8000
\ No newline at end of file
Index: AdvancedQuerying/target/classes/shampoo-company-insert.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/target/classes/shampoo-company-insert.sql b/AdvancedQuerying/target/classes/shampoo-company-insert.sql
new file mode 100644
--- /dev/null	(date 1624870234000)
+++ b/AdvancedQuerying/target/classes/shampoo-company-insert.sql	(date 1624870234000)
@@ -0,0 +1,111 @@
+
+INSERT INTO shampoo_company.labels(id, title, subtitle)
+VALUES (1, 'Repair & Nutrition', 'For naturally beautiful hair from roots to tips!'),
+       (2, 'Taming & Anti-Split Ends', 'For unruly hair with split ends.'),
+       (3, 'Volume & Fullness', 'Flat & thin hair.'),
+       (4, 'Strength & Nourishing', 'Brittle & fragile hair.'),
+       (5, 'Shine & Hydration', 'Dry & dull hair.'),
+       (6, 'Color Protection & Radiance', 'Colored or highlighted hair'),
+       (7, 'Oil Repair', 'Dry & depleted hair'),
+       (8, 'Long-Hair', 'Dull & shine less and Difficult to comb'),
+       (9, 'Vital', 'Tired & lifeless hair'),
+       (10, 'Power Volume', 'Fine & flat hair'),
+       (11, 'Anti-Dandruff', 'Quickly greasing & flaky hair');
+USE shampoo_company;
+INSERT INTO shampoo_company.ingredients(id, name, price)
+VALUES (1, 'Apple', '0.50'),
+       (2, 'Nettle', '0.70'),
+       (3, 'Macadamia Oil', '1.00'),
+       (4, 'Aloe Vera', '0.90'),
+       (5, 'Lavender', '0.70'),
+       (6, 'Herbs', '0.70'),
+       (7, 'Wild Rose', '0.80'),
+       (8, 'Raspberry', '0.70'),
+       (9, 'Cherry', 0.70),
+       (10, 'Berry', '0.50'),
+       (11, 'Mineral-Collagen', '1'),
+       (12, 'Zinc Pyrithione', '1.20'),
+       (13, 'Micro-Crystals', '0.90'),
+       (14, 'Active-Caffeine', '1.20');
+
+INSERT INTO shampoo_company.shampoos(id, brand, price, size, label)
+VALUES (1, 'Swiss Green Apple & Nettle', '3.50', '0', 4),
+       (2, 'Moroccan Argan Oil & Macadamia', '5.50', '0', 9),
+       (3, 'Nature Moments Mediterranean Olive Oil & Aloe Vera', '6.50', '1', 3),
+       (4, 'Volume & Fullness Lavender', '5.50', '1', 9),
+       (5, 'Strength & Nourishing Elixir', '4.50', '0', 3),
+       (6, 'Rose Shine & Hydration', '6.50', '1', 5),
+       (7, 'Color Protection & Radiance', '6.75', '1', 5),
+       (8, 'Intense-Charm Brunette', '5.50', '0', 10),
+       (9, 'Heavenly Long Long-Hair', '7.50', '1', 8),
+       (10, 'Sea Buckthorn Vital', '6.50', '1', 4),
+       (11, 'Fresh it Up!', '7.65', '1', 11),
+       (12, 'Nectar Nutrition', '6.85', '1', 5),
+       (13, 'Keratin Strong', '8.80', '0', 9),
+       (14, 'Superfruit Nutrition', '8.80', '0', 5),
+       (15, 'Cotton Fresh', '8.80', '0', 2),
+       (16, 'Silk Comb', '7.80', '0', 9),
+       (17, 'Active-Caffeine', '7.80', '0', 10),
+       (18, 'Volume & Fullness Lavender', '8.50', '2', 9),
+       (19, 'Strength & Nourishing Elixir', '7.20', '2', 3),
+       (20, 'Rose Shine & Hydration', '10.70', '2', 5),
+       (21, 'Color Protection & Radiance', '11.50', '2', 5),
+       (22, 'Nectar Nutrition', '10.50', '2', 5),
+       (23, 'Keratin Strong', '8.80', '2', 9),
+       (24, 'Superfruit Nutrition', '13.80', '2', 5),
+       (25, 'Cotton Fresh', '13.60', '2', 2);
+
+INSERT INTO shampoos_ingredients(shampoo_id, ingredient_id)
+VALUES (1, 1),
+       (1, 2),
+       (2, 3),
+       (3, 11),
+       (3, 5),
+       (4, 11),
+       (3, 6),
+       (5, 4),
+       (5, 7),
+       (6, 4),
+       (6, 7),
+       (7, 8),
+       (7, 9),
+       (7, 10),
+       (8, 3),
+       (8, 7),
+       (9, 12),
+       (9, 8),
+       (10, 6),
+       (11, 13),
+       (11, 10),
+       (12, 4),
+       (12, 10),
+       (12, 9),
+       (13, 11),
+       (13, 3),
+       (14, 1),
+       (14, 10),
+       (14, 9),
+       (15, 4),
+       (15, 5),
+       (16, 13),
+       (16, 4),
+       (17, 13),
+       (18, 11),
+       (18, 6),
+       (19, 4),
+       (19, 7),
+       (20, 4),
+       (20, 7),
+       (21, 8),
+       (21, 9),
+       (21, 10),
+       (22, 4),
+       (22, 10),
+       (22, 9),
+       (23, 11),
+       (23, 3),
+       (24, 1),
+       (24, 10),
+       (24, 9),
+       (25, 4),
+       (25, 5);
\ No newline at end of file
Index: AdvancedQuerying/src/main/resources/shampoo-company-insert.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/resources/shampoo-company-insert.sql b/AdvancedQuerying/src/main/resources/shampoo-company-insert.sql
new file mode 100644
--- /dev/null	(date 1624870234000)
+++ b/AdvancedQuerying/src/main/resources/shampoo-company-insert.sql	(date 1624870234000)
@@ -0,0 +1,111 @@
+
+INSERT INTO shampoo_company.labels(id, title, subtitle)
+VALUES (1, 'Repair & Nutrition', 'For naturally beautiful hair from roots to tips!'),
+       (2, 'Taming & Anti-Split Ends', 'For unruly hair with split ends.'),
+       (3, 'Volume & Fullness', 'Flat & thin hair.'),
+       (4, 'Strength & Nourishing', 'Brittle & fragile hair.'),
+       (5, 'Shine & Hydration', 'Dry & dull hair.'),
+       (6, 'Color Protection & Radiance', 'Colored or highlighted hair'),
+       (7, 'Oil Repair', 'Dry & depleted hair'),
+       (8, 'Long-Hair', 'Dull & shine less and Difficult to comb'),
+       (9, 'Vital', 'Tired & lifeless hair'),
+       (10, 'Power Volume', 'Fine & flat hair'),
+       (11, 'Anti-Dandruff', 'Quickly greasing & flaky hair');
+USE shampoo_company;
+INSERT INTO shampoo_company.ingredients(id, name, price)
+VALUES (1, 'Apple', '0.50'),
+       (2, 'Nettle', '0.70'),
+       (3, 'Macadamia Oil', '1.00'),
+       (4, 'Aloe Vera', '0.90'),
+       (5, 'Lavender', '0.70'),
+       (6, 'Herbs', '0.70'),
+       (7, 'Wild Rose', '0.80'),
+       (8, 'Raspberry', '0.70'),
+       (9, 'Cherry', 0.70),
+       (10, 'Berry', '0.50'),
+       (11, 'Mineral-Collagen', '1'),
+       (12, 'Zinc Pyrithione', '1.20'),
+       (13, 'Micro-Crystals', '0.90'),
+       (14, 'Active-Caffeine', '1.20');
+
+INSERT INTO shampoo_company.shampoos(id, brand, price, size, label)
+VALUES (1, 'Swiss Green Apple & Nettle', '3.50', '0', 4),
+       (2, 'Moroccan Argan Oil & Macadamia', '5.50', '0', 9),
+       (3, 'Nature Moments Mediterranean Olive Oil & Aloe Vera', '6.50', '1', 3),
+       (4, 'Volume & Fullness Lavender', '5.50', '1', 9),
+       (5, 'Strength & Nourishing Elixir', '4.50', '0', 3),
+       (6, 'Rose Shine & Hydration', '6.50', '1', 5),
+       (7, 'Color Protection & Radiance', '6.75', '1', 5),
+       (8, 'Intense-Charm Brunette', '5.50', '0', 10),
+       (9, 'Heavenly Long Long-Hair', '7.50', '1', 8),
+       (10, 'Sea Buckthorn Vital', '6.50', '1', 4),
+       (11, 'Fresh it Up!', '7.65', '1', 11),
+       (12, 'Nectar Nutrition', '6.85', '1', 5),
+       (13, 'Keratin Strong', '8.80', '0', 9),
+       (14, 'Superfruit Nutrition', '8.80', '0', 5),
+       (15, 'Cotton Fresh', '8.80', '0', 2),
+       (16, 'Silk Comb', '7.80', '0', 9),
+       (17, 'Active-Caffeine', '7.80', '0', 10),
+       (18, 'Volume & Fullness Lavender', '8.50', '2', 9),
+       (19, 'Strength & Nourishing Elixir', '7.20', '2', 3),
+       (20, 'Rose Shine & Hydration', '10.70', '2', 5),
+       (21, 'Color Protection & Radiance', '11.50', '2', 5),
+       (22, 'Nectar Nutrition', '10.50', '2', 5),
+       (23, 'Keratin Strong', '8.80', '2', 9),
+       (24, 'Superfruit Nutrition', '13.80', '2', 5),
+       (25, 'Cotton Fresh', '13.60', '2', 2);
+
+INSERT INTO shampoos_ingredients(shampoo_id, ingredient_id)
+VALUES (1, 1),
+       (1, 2),
+       (2, 3),
+       (3, 11),
+       (3, 5),
+       (4, 11),
+       (3, 6),
+       (5, 4),
+       (5, 7),
+       (6, 4),
+       (6, 7),
+       (7, 8),
+       (7, 9),
+       (7, 10),
+       (8, 3),
+       (8, 7),
+       (9, 12),
+       (9, 8),
+       (10, 6),
+       (11, 13),
+       (11, 10),
+       (12, 4),
+       (12, 10),
+       (12, 9),
+       (13, 11),
+       (13, 3),
+       (14, 1),
+       (14, 10),
+       (14, 9),
+       (15, 4),
+       (15, 5),
+       (16, 13),
+       (16, 4),
+       (17, 13),
+       (18, 11),
+       (18, 6),
+       (19, 4),
+       (19, 7),
+       (20, 4),
+       (20, 7),
+       (21, 8),
+       (21, 9),
+       (21, 10),
+       (22, 4),
+       (22, 10),
+       (22, 9),
+       (23, 11),
+       (23, 3),
+       (24, 1),
+       (24, 10),
+       (24, 9),
+       (25, 4),
+       (25, 5);
\ No newline at end of file
Index: AdvancedQuerying/src/main/java/com/example/advquerying/repositories/IngredientRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/repositories/IngredientRepository.java b/AdvancedQuerying/src/main/java/com/example/advquerying/repositories/IngredientRepository.java
new file mode 100644
--- /dev/null	(date 1662448407937)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/repositories/IngredientRepository.java	(date 1662448407937)
@@ -0,0 +1,31 @@
+package com.example.advquerying.repositories;
+
+import com.example.advquerying.entities.Ingredient;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Modifying;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+import java.util.Collection;
+import java.util.List;
+
+@Repository
+public interface IngredientRepository extends JpaRepository<Ingredient, Long> {
+
+    List<Ingredient> findAllByNameStartsWith(String str);
+
+    List<Ingredient> findAllByNameInOrderByPrice(Collection<String> name);
+
+    @Query("delete from Ingredient i where i.name like :name")
+    @Modifying
+    void deleteIngredientByGivenName(@Param(value = "name") String ingredientName);
+
+    @Query("update Ingredient i set i.price = i.price * 1.1")
+    @Modifying
+    void increasePriceOfAllIngredientsByTenPercent();
+
+    @Query("update Ingredient i set i.price = i.price * 1.1 where i.name in :ingredients")
+    @Modifying
+    void increasePriceOfGivenIngredients(@Param(value = "ingredients") List<String> ingredients);
+}
Index: AdvancedQuerying/.idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/.idea/inspectionProfiles/Project_Default.xml b/AdvancedQuerying/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1662387984696)
+++ b/AdvancedQuerying/.idea/inspectionProfiles/Project_Default.xml	(date 1662387984696)
@@ -0,0 +1,8 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="AutoCloseableResource" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="METHOD_MATCHER_CONFIG" value="java.util.Formatter,format,java.io.Writer,append,com.google.common.base.Preconditions,checkNotNull,org.hibernate.Session,close,java.io.PrintWriter,printf,java.io.PrintStream,printf,com.example.advquerying.Services.ShampooServiceImpl,printShampooPattern" />
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
Index: AdvancedQuerying/src/main/java/com/example/advquerying/CommandRunner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/CommandRunner.java b/AdvancedQuerying/src/main/java/com/example/advquerying/CommandRunner.java
new file mode 100644
--- /dev/null	(date 1662448407947)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/CommandRunner.java	(date 1662448407947)
@@ -0,0 +1,100 @@
+package com.example.advquerying;
+
+import com.example.advquerying.services.IngredientService;
+import com.example.advquerying.services.ShampooService;
+import com.example.advquerying.entities.Size;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.CommandLineRunner;
+import org.springframework.stereotype.Component;
+
+import java.util.List;
+import java.util.Scanner;
+import java.util.Set;
+
+@Component
+public class CommandRunner implements CommandLineRunner {
+
+    private final ShampooService shampooService;
+
+    private final IngredientService ingredientService;
+
+    @Autowired
+    public CommandRunner(ShampooService shampooService, IngredientService ingredientService) {
+        this.shampooService = shampooService;
+        this.ingredientService = ingredientService;
+    }
+
+    @Override
+    public void run(String... args) throws Exception {
+
+        // the exercise methods are with hardcoded values
+
+        System.out.println("Select exercise from 1 to 11:");
+
+        try {
+            Scanner scanner = new Scanner(System.in);
+            int exNumber = Integer.parseInt(scanner.nextLine());
+
+            switch (exNumber) {
+                case 1 -> exercise1();
+                case 2 -> exercise2();
+                case 3 -> exercise3();
+                case 4 -> exercise4();
+                case 5 -> exercise5();
+                case 6 -> exercise6();
+                case 7 -> exercise7();
+                case 8 -> exercise8();
+                case 9 -> exercise9();
+                case 10 -> exercise10();
+                case 11 -> exercise11();
+                default -> System.out.println("Please enter valid number from 1 to 11 next time!");
+            }
+        } catch (Exception e) {
+            System.out.println("Try again with valid exercise number!");
+        }
+    }
+
+    private void exercise11() {
+        ingredientService.increasePriceOfGivenIngredients(List.of("Apple", "Nettle"));
+    }
+
+    private void exercise10() {
+        ingredientService.increasePriceOfAllIngredientsByTenPercent();
+    }
+
+    private void exercise9() {
+        ingredientService.deleteIngredientsByGivenName("Lavender");
+    }
+
+    private void exercise8() {
+        shampooService.printShampoosWithIngredientsLessThan(2);
+    }
+
+    private void exercise7() {
+        shampooService.printShampoosWithGivenIngredients(Set.of("Berry", "Mineral-Collagen"));
+    }
+
+    private void exercise6() {
+        shampooService.printShampoosCountWithPriceLessThan(8.5);
+    }
+
+    private void exercise5() {
+        ingredientService.printIngredientsInGivenList(List.of("Lavender", "Herbs", "Apple"));
+    }
+
+    private void exercise4() {
+        ingredientService.printIngredientsThatStartWith("M");
+    }
+
+    private void exercise3() {
+        shampooService.printAllShampoosWithPriceBiggerThan(5);
+    }
+
+    private void exercise2() {
+        shampooService.printAllShampoosBySizeOrLabelId(Size.MEDIUM, 10L);
+    }
+
+    private void exercise1() {
+        shampooService.printAllShampoosBySize(Size.MEDIUM);
+    }
+}
Index: AdvancedQuerying/src/main/java/com/example/advquerying/AdvqueryingApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/AdvqueryingApplication.java b/AdvancedQuerying/src/main/java/com/example/advquerying/AdvqueryingApplication.java
new file mode 100644
--- /dev/null	(date 1624868500000)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/AdvqueryingApplication.java	(date 1624868500000)
@@ -0,0 +1,13 @@
+package com.example.advquerying;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+public class AdvqueryingApplication {
+
+    public static void main(String[] args) {
+        SpringApplication.run(AdvqueryingApplication.class, args);
+    }
+
+}
Index: AdvancedQuerying/.idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/.idea/jarRepositories.xml b/AdvancedQuerying/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1662379840567)
+++ b/AdvancedQuerying/.idea/jarRepositories.xml	(date 1662379840567)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: AdvancedQuerying/src/main/java/com/example/advquerying/services/IngredientServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/services/IngredientServiceImpl.java b/AdvancedQuerying/src/main/java/com/example/advquerying/services/IngredientServiceImpl.java
new file mode 100644
--- /dev/null	(date 1662448407942)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/services/IngredientServiceImpl.java	(date 1662448407942)
@@ -0,0 +1,50 @@
+package com.example.advquerying.services;
+
+import com.example.advquerying.repositories.IngredientRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.Collection;
+import java.util.List;
+
+@Service
+public class IngredientServiceImpl implements IngredientService {
+
+    private final IngredientRepository ingredientRepository;
+
+    @Autowired
+    public IngredientServiceImpl(IngredientRepository ingredientRepository) {
+        this.ingredientRepository = ingredientRepository;
+    }
+
+    @Override
+    public void printIngredientsThatStartWith(String str) {
+        ingredientRepository.findAllByNameStartsWith(str)
+                .forEach(i -> System.out.println(i.getName()));
+    }
+
+    @Override
+    public void printIngredientsInGivenList(Collection<String> ingredients) {
+        ingredientRepository.findAllByNameInOrderByPrice(ingredients)
+                .forEach(i -> System.out.println(i.getName()));
+    }
+
+    @Override
+    @Transactional
+    public void deleteIngredientsByGivenName(String ingredientName) {
+        ingredientRepository.deleteIngredientByGivenName(ingredientName);
+    }
+
+    @Override
+    @Transactional
+    public void increasePriceOfAllIngredientsByTenPercent() {
+        ingredientRepository.increasePriceOfAllIngredientsByTenPercent();
+    }
+
+    @Override
+    @Transactional
+    public void increasePriceOfGivenIngredients(List<String> ingredients) {
+        ingredientRepository.increasePriceOfGivenIngredients(ingredients);
+    }
+}
Index: AdvancedQuerying/.idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/.idea/uiDesigner.xml b/AdvancedQuerying/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1662386859776)
+++ b/AdvancedQuerying/.idea/uiDesigner.xml	(date 1662386859776)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: AdvancedQuerying/src/main/java/com/example/advquerying/repositories/LabelRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/repositories/LabelRepository.java b/AdvancedQuerying/src/main/java/com/example/advquerying/repositories/LabelRepository.java
new file mode 100644
--- /dev/null	(date 1662448407961)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/repositories/LabelRepository.java	(date 1662448407961)
@@ -0,0 +1,9 @@
+package com.example.advquerying.repositories;
+
+import com.example.advquerying.entities.Label;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface LabelRepository extends JpaRepository<Label, Long> {
+}
Index: AdvancedQuerying/src/main/java/com/example/advquerying/repositories/ShampooRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/repositories/ShampooRepository.java b/AdvancedQuerying/src/main/java/com/example/advquerying/repositories/ShampooRepository.java
new file mode 100644
--- /dev/null	(date 1662448407932)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/repositories/ShampooRepository.java	(date 1662448407932)
@@ -0,0 +1,30 @@
+package com.example.advquerying.repositories;
+
+import com.example.advquerying.entities.Shampoo;
+import com.example.advquerying.entities.Size;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+import java.math.BigDecimal;
+import java.util.List;
+import java.util.Set;
+
+@Repository
+public interface ShampooRepository extends JpaRepository<Shampoo, Long> {
+
+    List<Shampoo> findAllBySizeOrderById(Size size);
+
+    List<Shampoo> findAllBySizeOrLabel_IdOrderByPrice(Size size, Long labelId);
+
+    List<Shampoo> findAllByPriceGreaterThanEqualOrderByPriceDesc(BigDecimal price);
+
+    int countAllByPriceIsLessThan(BigDecimal price);
+
+    @Query("select s from Shampoo s join s.ingredients i where i.name in :ingredients")
+    List<Shampoo> getShampoosWithGivenIngredients(@Param(value = "ingredients") Set<String> ingredientsNames);
+
+    @Query("select s from Shampoo s where size(s.ingredients) < :count")
+    List<Shampoo> getShampoosByIngredientsLessThan(@Param(value = "count") int count);
+}
Index: AdvancedQuerying/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/.idea/.gitignore b/AdvancedQuerying/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1662379840616)
+++ b/AdvancedQuerying/.idea/.gitignore	(date 1662379840616)
@@ -0,0 +1,8 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: AdvancedQuerying/src/main/java/com/example/advquerying/services/ShampooService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/services/ShampooService.java b/AdvancedQuerying/src/main/java/com/example/advquerying/services/ShampooService.java
new file mode 100644
--- /dev/null	(date 1662448407956)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/services/ShampooService.java	(date 1662448407956)
@@ -0,0 +1,20 @@
+package com.example.advquerying.services;
+
+import com.example.advquerying.entities.Size;
+
+import java.util.Set;
+
+public interface ShampooService {
+
+    void printAllShampoosBySize (Size size);
+
+    void printAllShampoosBySizeOrLabelId(Size size, Long labelId);
+
+    void printAllShampoosWithPriceBiggerThan(double price);
+
+    void printShampoosCountWithPriceLessThan(double price);
+
+    void printShampoosWithGivenIngredients(Set<String> ingredientsNames);
+
+    void printShampoosWithIngredientsLessThan(int count);
+}
Index: AdvancedQuerying/.idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/.idea/compiler.xml b/AdvancedQuerying/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1662448308981)
+++ b/AdvancedQuerying/.idea/compiler.xml	(date 1662448308981)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="AdvancedQuerying" />
+      </profile>
+    </annotationProcessing>
+  </component>
+  <component name="JavacSettings">
+    <option name="ADDITIONAL_OPTIONS_OVERRIDE">
+      <module name="AdvancedQuerying" options="-parameters" />
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: AdvancedQuerying/src/main/java/com/example/advquerying/services/IngredientService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/services/IngredientService.java b/AdvancedQuerying/src/main/java/com/example/advquerying/services/IngredientService.java
new file mode 100644
--- /dev/null	(date 1662448407925)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/services/IngredientService.java	(date 1662448407925)
@@ -0,0 +1,17 @@
+package com.example.advquerying.services;
+
+import java.util.Collection;
+import java.util.List;
+
+public interface IngredientService {
+
+    void printIngredientsThatStartWith(String str);
+
+    void printIngredientsInGivenList(Collection<String> ingredients);
+
+    void deleteIngredientsByGivenName(String ingredientName);
+
+    void increasePriceOfAllIngredientsByTenPercent();
+
+    void increasePriceOfGivenIngredients(List<String> apple);
+}
Index: AdvancedQuerying/.idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/.idea/encodings.xml b/AdvancedQuerying/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1662379840561)
+++ b/AdvancedQuerying/.idea/encodings.xml	(date 1662379840561)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: AdvancedQuerying/src/main/java/com/example/advquerying/services/ShampooServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/services/ShampooServiceImpl.java b/AdvancedQuerying/src/main/java/com/example/advquerying/services/ShampooServiceImpl.java
new file mode 100644
--- /dev/null	(date 1662448407951)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/services/ShampooServiceImpl.java	(date 1662448407951)
@@ -0,0 +1,62 @@
+package com.example.advquerying.services;
+
+import com.example.advquerying.repositories.ShampooRepository;
+import com.example.advquerying.entities.Shampoo;
+import com.example.advquerying.entities.Size;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.math.BigDecimal;
+import java.util.Set;
+
+@Service
+public class ShampooServiceImpl implements ShampooService {
+
+    private final ShampooRepository shampooRepository;
+
+    @Autowired
+    public ShampooServiceImpl(ShampooRepository shampooRepository) {
+        this.shampooRepository = shampooRepository;
+    }
+
+    @Override
+    public void printAllShampoosBySize (Size size) {
+        shampooRepository.findAllBySizeOrderById(size)
+                .forEach(ShampooServiceImpl::shampooPrintPattern);
+    }
+
+    @Override
+    public void printAllShampoosBySizeOrLabelId(Size size, Long labelId) {
+        shampooRepository.findAllBySizeOrLabel_IdOrderByPrice(size, labelId)
+                .forEach(ShampooServiceImpl::shampooPrintPattern);
+    }
+
+    @Override
+    public void printAllShampoosWithPriceBiggerThan(double price) {
+        BigDecimal bigDecimal = BigDecimal.valueOf(price);
+        shampooRepository.findAllByPriceGreaterThanEqualOrderByPriceDesc(bigDecimal)
+                .forEach(ShampooServiceImpl::shampooPrintPattern);
+    }
+
+    @Override
+    public void printShampoosCountWithPriceLessThan(double price) {
+        System.out.println(shampooRepository.countAllByPriceIsLessThan(BigDecimal.valueOf(price)));
+    }
+
+    @Override
+    public void printShampoosWithGivenIngredients(Set<String> ingredientsNames) {
+        shampooRepository.getShampoosWithGivenIngredients(ingredientsNames)
+                .forEach(s -> System.out.println(s.getBrand()));
+    }
+
+    @Override
+    public void printShampoosWithIngredientsLessThan(int count) {
+        shampooRepository.getShampoosByIngredientsLessThan(count)
+                .forEach(s -> System.out.println(s.getBrand()));
+    }
+
+    private static void shampooPrintPattern(Shampoo s) {
+        System.out.printf("%s %s %.2flv.\n", s.getBrand(),
+                s.getSize().name(), s.getPrice());
+    }
+}
Index: AdvancedQuerying/src/main/java/com/example/advquerying/entities/Label.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/entities/Label.java b/AdvancedQuerying/src/main/java/com/example/advquerying/entities/Label.java
new file mode 100644
--- /dev/null	(date 1624869856000)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/entities/Label.java	(date 1624869856000)
@@ -0,0 +1,42 @@
+package com.example.advquerying.entities;
+import javax.persistence.*;
+import java.util.Set;
+
+@Entity
+@Table(name = "labels")
+public class Label extends BaseEntity {
+
+    private String title;
+    private String subtitle;
+    private Set<Shampoo> shampoos;
+
+    public Label() {
+    }
+
+    @Column(name = "title")
+    public String getTitle() {
+        return this.title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    @Column(name = "subtitle")
+    public String getSubtitle() {
+        return this.subtitle;
+    }
+
+    public void setSubtitle(String subtitle) {
+        this.subtitle = subtitle;
+    }
+
+    @OneToMany(mappedBy = "label", targetEntity = Shampoo.class)
+    public Set<Shampoo> getShampoos() {
+        return this.shampoos;
+    }
+
+    public void setShampoos(Set<Shampoo> shampoos) {
+        this.shampoos = shampoos;
+    }
+}
Index: AdvancedQuerying/src/main/java/com/example/advquerying/entities/Shampoo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/entities/Shampoo.java b/AdvancedQuerying/src/main/java/com/example/advquerying/entities/Shampoo.java
new file mode 100644
--- /dev/null	(date 1624869856000)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/entities/Shampoo.java	(date 1624869856000)
@@ -0,0 +1,69 @@
+package com.example.advquerying.entities;
+import javax.persistence.*;
+import java.math.BigDecimal;
+import java.util.Set;
+
+@Entity
+@Table(name = "shampoos")
+public class Shampoo extends BaseEntity {
+
+    private String brand;
+    private BigDecimal price;
+    private Size size;
+    private Label label;
+    private Set<Ingredient> ingredients;
+
+    public Shampoo() {
+    }
+
+    @Column(name = "brand")
+    public String getBrand() {
+        return this.brand;
+    }
+
+    public void setBrand(String brand) {
+        this.brand = brand;
+    }
+
+    @Column(name = "price")
+    public BigDecimal getPrice() {
+        return this.price;
+    }
+
+    public void setPrice(BigDecimal price) {
+        this.price = price;
+    }
+
+    @Enumerated(EnumType.ORDINAL)
+    @Column(name = "size")
+    public Size getSize() {
+        return this.size;
+    }
+
+    public void setSize(Size size) {
+        this.size = size;
+    }
+
+    @ManyToOne(optional = true, cascade = CascadeType.ALL,
+            fetch = FetchType.EAGER)
+    @JoinColumn(name = "label", referencedColumnName = "id")
+    public Label getLabel() {
+        return this.label;
+    }
+
+    public void setLabel(Label label) {
+        this.label = label;
+    }
+
+    @ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
+    @JoinTable(name = "shampoos_ingredients",
+            joinColumns = @JoinColumn(name = "shampoo_id", referencedColumnName = "id"),
+            inverseJoinColumns = @JoinColumn(name = "ingredient_id", referencedColumnName = "id"))
+    public Set<Ingredient> getIngredients() {
+        return this.ingredients;
+    }
+
+    public void setIngredients(Set<Ingredient> ingredients) {
+        this.ingredients = ingredients;
+    }
+}
Index: AdvancedQuerying/src/main/java/com/example/advquerying/entities/BaseEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/entities/BaseEntity.java b/AdvancedQuerying/src/main/java/com/example/advquerying/entities/BaseEntity.java
new file mode 100644
--- /dev/null	(date 1624869856000)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/entities/BaseEntity.java	(date 1624869856000)
@@ -0,0 +1,23 @@
+package com.example.advquerying.entities;
+
+import javax.persistence.*;
+
+@MappedSuperclass
+public abstract class BaseEntity {
+
+    private Long id;
+
+    protected BaseEntity() {
+    }
+
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "id")
+    public Long getId() {
+        return this.id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+}
Index: AdvancedQuerying/.idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/.idea/misc.xml b/AdvancedQuerying/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1662379840554)
+++ b/AdvancedQuerying/.idea/misc.xml	(date 1662379840554)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_18" default="true" project-jdk-name="openjdk-18" project-jdk-type="JavaSDK" />
+</project>
\ No newline at end of file
Index: AdvancedQuerying/src/main/java/com/example/advquerying/entities/Ingredient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/entities/Ingredient.java b/AdvancedQuerying/src/main/java/com/example/advquerying/entities/Ingredient.java
new file mode 100644
--- /dev/null	(date 1624869856000)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/entities/Ingredient.java	(date 1624869856000)
@@ -0,0 +1,45 @@
+package com.example.advquerying.entities;
+import javax.persistence.*;
+import java.math.BigDecimal;
+import java.util.Set;
+
+@Entity
+@Table(name = "ingredients")
+public class Ingredient extends BaseEntity {
+
+    private String name;
+    private BigDecimal price;
+    private Set<Shampoo> shampoos;
+
+    public Ingredient() {
+    }
+
+    @Column(name = "name")
+    public String getName() {
+        return this.name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @Column(name = "price")
+    public BigDecimal getPrice() {
+        return this.price;
+    }
+
+    public void setPrice(BigDecimal price) {
+        this.price = price;
+    }
+
+    @ManyToMany(mappedBy = "ingredients",
+            fetch = FetchType.EAGER,
+            cascade = CascadeType.ALL)
+    public Set<Shampoo> getShampoos() {
+        return this.shampoos;
+    }
+
+    public void setShampoos(Set<Shampoo> shampoos) {
+        this.shampoos = shampoos;
+    }
+}
Index: AdvancedQuerying/src/test/java/com/example/advquerying/AdvqueryingApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/test/java/com/example/advquerying/AdvqueryingApplicationTests.java b/AdvancedQuerying/src/test/java/com/example/advquerying/AdvqueryingApplicationTests.java
new file mode 100644
--- /dev/null	(date 1624868500000)
+++ b/AdvancedQuerying/src/test/java/com/example/advquerying/AdvqueryingApplicationTests.java	(date 1624868500000)
@@ -0,0 +1,13 @@
+package com.example.advquerying;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class AdvqueryingApplicationTests {
+
+    @Test
+    void contextLoads() {
+    }
+
+}
Index: AdvancedQuerying/src/main/java/com/example/advquerying/entities/Size.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/AdvancedQuerying/src/main/java/com/example/advquerying/entities/Size.java b/AdvancedQuerying/src/main/java/com/example/advquerying/entities/Size.java
new file mode 100644
--- /dev/null	(date 1624869856000)
+++ b/AdvancedQuerying/src/main/java/com/example/advquerying/entities/Size.java	(date 1624869856000)
@@ -0,0 +1,4 @@
+package com.example.advquerying.entities;
+public enum Size {
+    SMALL, MEDIUM, LARGE;
+}
